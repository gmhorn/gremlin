package spectrum

import "image"

// Film aggregates the light values generated by the rendering equations.
type Film struct {
	Width   int
	Height  int
	data    []Energy
	samples []uint
}

func NewFilm(w, h int) *Film {
	return &Film{
		Width:   w,
		Height:  h,
		data:    make([]Energy, w*h),
		samples: make([]uint, w*h),
	}
}

func (f *Film) Add(u, v int, e Energy) {
	idx := v*f.Width + u
	f.data[idx][0] += e[0]
	f.data[idx][1] += e[1]
	f.data[idx][2] += e[2]
	f.samples[idx]++
}

func (f *Film) Image() *image.RGBA {
	img := image.NewRGBA(image.Rect(0, 0, f.Width, f.Height))
	for v := 0; v < f.Height; v++ {
		for u := 0; u < f.Width; u++ {
			idx := v*f.Width + u
			n := 1 / float64(f.samples[idx])
			e := f.data[idx].Scale(n)
			img.Set(u, v, e.ToRGBA())
		}
	}
	return img
}
